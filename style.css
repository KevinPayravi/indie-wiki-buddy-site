/* Element styling */
body {
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji";
  background: #005799;
  margin-top: 20px;
}

h1 {
  font-size: 2.3em;
}

a {
  text-decoration-style: dotted;
  text-decoration-thickness: 1px;
}

table {
  border: 2px solid #eee;
}

th {
  text-align: left;
  background-color: #eee;
}

th,
td {
  padding: .2em .5em;
}

/* Common use classes */
.clear {
  clear: both;
}

.align-center {
  text-align: center;
}

.flex {
  display: flex;
  flex-direction: row;
  gap: 1em;
}
.flex > * {
  margin: auto;
}

.content {
  padding-bottom: 10px;
}

.content img {
  max-width: 100%;
}

.changelog ul img {
  box-shadow: 5px 5px 5px 0px rgba(0,0,0,0.3);
  margin: 1em;
  border: 1px solid #d8d8d8;
}

.text-decor-none {
  text-decoration: none;
}

.button-link {
  text-decoration: none;
}

.button {
  background-color: #005799;
  border: none;
  border-radius: 15px;
  color: white;
  padding: 16px;
  text-align: center;
  text-decoration: none;
  display: inline-block;
  font-size: 16px;
  margin: 4px 2px;
  transition-duration: 0.4s;
  cursor: pointer;
  max-width: 100%;
  width: 400px;
}

.button:hover {
  background-color: #00467a;
}

.button[disabled] {
  background-color: #CCCCCC;
  color: #888888
}

.button[disabled] img {
  filter: grayscale(1);
}

.button img,
.button span {
  vertical-align: middle;
  padding: 0px 5px;
}

/* List modifiers */
ul.no-markers {
  list-style-type: none;
  padding: 0;
}
ul.padded {
  padding-left: .8em;
}

/* Content styling */
.container {
  max-width: 1000px;
  min-height: 50px;
  background-color: white;
  border-radius: 20px;
  margin: 0 auto;
  margin-bottom: 40px;
  padding: 20px 40px;
}
.container>.content,
.container>.question {
  word-wrap: break-word;
  margin: 0 auto;
}

.container.align-center>.content,
.container.align-center>.question {
  max-width: 70ch;
}

.display {
  text-align: center;
  margin: 1em 0;
}

.display>img {
  margin: 0 auto;
  border: 10px solid #005699;
  border-radius: 20px;
  max-width: 400px;
  width: 90%;
}

.header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  font-weight: 600;
}

.header>div {
  display: flex;
  gap: 10px;
}

.header>div:first-child {
  text-align: left;
}

.header>div:last-child {
  text-align: right;
}

.subtitle {
  font-size: 2.5em;
  font-weight: 600;
  display: block;
  width: 100%;
  text-align: center;
  margin: 0 auto;
  margin-bottom: 0.83em;
  max-width: 600px;
}

.question {
  font-weight: 600;
  font-size: 1.2em;
  display: block;
  padding-bottom: 15px;
}

.no-wrap {
  white-space: nowrap;
}

.browser-icon {
  height: 1em;
  padding-left: 10px;
  vertical-align: middle;
}

@media (max-width: 800px) {
  .subtitle {
    font-size: 2em;
  }

  .header {
    flex-direction: column;
  }

  .header>div:first-child,
  .header>div:last-child {
    text-align: center;
  }

  .container {
    padding: 20px;
  }

  .flex {
    flex-direction: column;
  }
}

div.scroll {
  position: relative;
  height: 35px;
  background-color: transparent;
  overflow: hidden;
  z-index: 1;
  margin: 0 20px;
  padding: 0;
}

.m-scroll1 {
  overflow: hidden;
  white-space: nowrap;
  animation: scrollText1 120s infinite linear;
  animation-iteration-count: infinite;
  animation-timing-function: linear;
  width:100%;
  margin: 0;
  font-size: 0;
  display: flex;
  flex-wrap: nowrap;
  justify-content: space-around;
  width: fit-content;
}

.m-scroll2 {
  overflow: hidden;
  white-space: nowrap;
  animation: scrollText2 120s infinite linear;
  animation-iteration-count: infinite;
  animation-timing-function: linear;
  width:100%;
  margin: 0;
  font-size: 0;
  display: flex;
  flex-wrap: nowrap;
  justify-content: space-around;
  width: fit-content;
}

div.scroll img {
  display: inline-block;
  height: 25px;
  width: 25px;
  padding: 10px;
}

@keyframes scrollText1 {
  from {
      transform: translateX(0%);
  }
  to {
      transform: translateX(-50%);
  }
}

@keyframes scrollText2 {
  from {
      transform: translateX(-50%);
  }
  to {
      transform: translateX(0%);
  }
}
